# fasd aliases
# ------------
eval "$(fasd --init auto)"
alias j="fasd_cd -d"
alias kitty="LIBGL_ALWAYS_SOFTWARE=true GALLIUM_DRIVER=llvmpipe kitty"

# Exports
# ------------
#export PATH=$(composer global config bin-dir --absolute)
#export PATH="$PATH:$(composer global config bin-dir --absolute)"
export PATH="$PATH:/home/dariobf/.config/composer/vendor/bin"
export PATH="./node_modules/.bin:$PATH"

# NVM
# ---
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" --no-use
# nvm use 16 is too slow. Use this instead (with --no-use):
PATH="${NVM_DIR}/versions/node/v20.12.2/bin:${PATH}"

# ALiases
# ------------
alias ll='lsd -lh --group-dirs=first'
alias la='lsd -a --group-dirs=first'
alias l='lsd --group-dirs=first'
alias lla='lsd -lha --group-dirs=first'
alias ls='lsd --group-dirs=first'

alias dev='cd ~/DEV'
alias hosts='sudo nano /etc/hosts'

alias lerr='lando logs --s appserver -f'
alias lerr7='lando logs --s appserver -f | grep "\[php7:"'
alias lerr8='lando logs --s appserver -f | grep "\[php8:"'

alias almacen='sshfs dariobf@192.168.1.250:/media/almacen /media/Almacen'
alias bfserver='ssh dariobf@192.168.1.250'
alias homebackup='sudo mount -t cifs //192.168.1.135/DarioBF /media/HomeBackup -o username=dariobf,uid=$(id -u),gid=$(id -g),file_mode=0664,dir_mode=0775,vers=3.0,mfsymlinks'

alias ovim="/usr/bin/vim"
alias vi="lvim"
alias vim="lvim"

alias ga="git add"
alias gc="git commit"
alias gco="git checkout"
alias gd="git difftool --no-symlinks --dir-diff"
alias gg="git pull"
alias gp="git push"
alias gs="git status"
alias gt="git tag"

#alias displays="~/.config/i3/scripts/displays.sh"

alias filezilla="/home/dariobf/FileZilla3/bin/filezilla"

alias mkwp="/home/dariobf/.dariobf/mkwp"
alias cleardev="ls | xargs rm -rf"
alias cleandev="ls | xargs rm -rf"

alias raw2jpg='find . -type f \( -iname "*.raw" -o -iname "*.nef" \) -exec bash -c '\''f="{}"; darktable-cli "$f" "${f%.*}.jpg" && rm "$f"'\'' \;'
alias cliphist-clear='sqlite3 ~/.local/share/cliphist/db "DELETE FROM clips;"'

# Compression
compress() { tar -czf "${1%/}.tar.gz" "${1%/}"; }
alias decompress="tar -xzf"

# Create a desktop launcher for a web app
web2app() {
  if [ "$#" -ne 3 ]; then
    echo "Usage: web2app <AppName> <AppURL> <IconURL> (IconURL must be in PNG -- use https://dashboardicons.com)"
    return 1
  fi

  local APP_NAME="$1"
  local APP_URL="$2"
  local ICON_URL="$3"
  local ICON_DIR="$HOME/.local/share/applications/icons"
  local DESKTOP_FILE="$HOME/.local/share/applications/${APP_NAME}.desktop"
  local ICON_PATH="${ICON_DIR}/${APP_NAME}.png"

  mkdir -p "$ICON_DIR"

  if ! curl -sL -o "$ICON_PATH" "$ICON_URL"; then
    echo "Error: Failed to download icon."
    return 1
  fi

  cat > "$DESKTOP_FILE" <<EOF
[Desktop Entry]
Version=1.0
Name=$APP_NAME
Comment=$APP_NAME
Exec=chromium --new-window --ozone-platform=wayland --app="$APP_URL" --name="$APP_NAME" --class="$APP_NAME"
Terminal=false
Type=Application
Icon=$ICON_PATH
StartupNotify=true
EOF

  chmod +x "$DESKTOP_FILE"
}

web2app-remove() {
  if [ "$#" -ne 1 ]; then
    echo "Usage: web2app-remove <AppName>"
    return 1
  fi

  local APP_NAME="$1"
  local ICON_DIR="$HOME/.local/share/applications/icons"
  local DESKTOP_FILE="$HOME/.local/share/applications/${APP_NAME}.desktop"
  local ICON_PATH="${ICON_DIR}/${APP_NAME}.png"

  rm "$DESKTOP_FILE"
  rm "$ICON_PATH"
}
